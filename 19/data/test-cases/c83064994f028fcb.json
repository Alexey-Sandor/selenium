{"uid":"c83064994f028fcb","name":"Авторизация с валидными данными","fullName":"web.tests.test_login.TestAuthenticationSuite#test_success_login","historyId":"abe6f57c2a3eb2c106a979fc8ef2420d","time":{"start":1711110757729,"stop":1711110757920,"duration":191},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_RESET\n  (Session info: chrome=122.0.6261.131)\nStacktrace:\n\tGetHandleVerifier [0x00007FF609A3AD02+56930]\n\t(No symbol) [0x00007FF6099AF602]\n\t(No symbol) [0x00007FF6098642E5]\n\t(No symbol) [0x00007FF60986011A]\n\t(No symbol) [0x00007FF6098529F4]\n\t(No symbol) [0x00007FF609853D29]\n\t(No symbol) [0x00007FF609852CF3]\n\t(No symbol) [0x00007FF609851EF4]\n\t(No symbol) [0x00007FF609851E11]\n\t(No symbol) [0x00007FF609850625]\n\t(No symbol) [0x00007FF609850EDC]\n\t(No symbol) [0x00007FF6098669FD]\n\t(No symbol) [0x00007FF6098E8B47]\n\t(No symbol) [0x00007FF6098CBC9A]\n\t(No symbol) [0x00007FF6098E81E2]\n\t(No symbol) [0x00007FF6098CBA43]\n\t(No symbol) [0x00007FF60989D438]\n\t(No symbol) [0x00007FF60989E4D1]\n\tGetHandleVerifier [0x00007FF609DB6F8D+3711213]\n\tGetHandleVerifier [0x00007FF609E104CD+4077101]\n\tGetHandleVerifier [0x00007FF609E0865F+4044735]\n\tGetHandleVerifier [0x00007FF609AD9736+706710]\n\t(No symbol) [0x00007FF6099BB8DF]\n\t(No symbol) [0x00007FF6099B6AC4]\n\t(No symbol) [0x00007FF6099B6C1C]\n\t(No symbol) [0x00007FF6099A68D4]\n\tBaseThreadInitThunk [0x00007FFA4D737344+20]\n\tRtlUserThreadStart [0x00007FFA4E9A26B1+33]","statusTrace":"self = <web.tests.test_login.TestAuthenticationSuite object at 0x000002527F5DF150>, chrome_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b97a96031c6f4faa4c05a0f6e8f46aca\")>\n\n    @allure.title(\"Авторизация с валидными данными\")\n    def test_success_login(self, chrome_driver):\n        expected_url = \"https://www.saucedemo.com/inventory.html\"\n        login_page = LoginPage(chrome_driver)\n>       login_page.go_to_site()\n\nweb\\tests\\test_login.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nweb\\pages\\base_page.py:26: in go_to_site\n    return self.driver.get(self.url)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002527DBAF850>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_RESET\\\\n  (S...07FF6099A68D4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA4D737344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFA4E9A26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_RESET\nE         (Session info: chrome=122.0.6261.131)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF609A3AD02+56930]\nE       \t(No symbol) [0x00007FF6099AF602]\nE       \t(No symbol) [0x00007FF6098642E5]\nE       \t(No symbol) [0x00007FF60986011A]\nE       \t(No symbol) [0x00007FF6098529F4]\nE       \t(No symbol) [0x00007FF609853D29]\nE       \t(No symbol) [0x00007FF609852CF3]\nE       \t(No symbol) [0x00007FF609851EF4]\nE       \t(No symbol) [0x00007FF609851E11]\nE       \t(No symbol) [0x00007FF609850625]\nE       \t(No symbol) [0x00007FF609850EDC]\nE       \t(No symbol) [0x00007FF6098669FD]\nE       \t(No symbol) [0x00007FF6098E8B47]\nE       \t(No symbol) [0x00007FF6098CBC9A]\nE       \t(No symbol) [0x00007FF6098E81E2]\nE       \t(No symbol) [0x00007FF6098CBA43]\nE       \t(No symbol) [0x00007FF60989D438]\nE       \t(No symbol) [0x00007FF60989E4D1]\nE       \tGetHandleVerifier [0x00007FF609DB6F8D+3711213]\nE       \tGetHandleVerifier [0x00007FF609E104CD+4077101]\nE       \tGetHandleVerifier [0x00007FF609E0865F+4044735]\nE       \tGetHandleVerifier [0x00007FF609AD9736+706710]\nE       \t(No symbol) [0x00007FF6099BB8DF]\nE       \t(No symbol) [0x00007FF6099B6AC4]\nE       \t(No symbol) [0x00007FF6099B6C1C]\nE       \t(No symbol) [0x00007FF6099A68D4]\nE       \tBaseThreadInitThunk [0x00007FFA4D737344+20]\nE       \tRtlUserThreadStart [0x00007FFA4E9A26B1+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"chrome_driver","time":{"start":1711110756451,"stop":1711110757729,"duration":1278},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"afterStages":[{"name":"chrome_driver::0","time":{"start":1711110758740,"stop":1711110760829,"duration":2089},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"suite","value":"Авторизация пользователя"},{"name":"feature","value":"Авторизация пользователя"},{"name":"tag","value":"@pytest.mark.usefixtures('chrome_driver')"},{"name":"parentSuite","value":"web.tests"},{"name":"subSuite","value":"TestAuthenticationSuite"},{"name":"host","value":"DESKTOP-AMCLGNE"},{"name":"thread","value":"12544-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"web.tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["@pytest.mark.usefixtures('chrome_driver')"]},"source":"c83064994f028fcb.json","parameterValues":[]}