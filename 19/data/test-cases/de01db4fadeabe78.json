{"uid":"de01db4fadeabe78","name":"Успешное добавление товара в корзину","fullName":"web.tests.test_cart.TestCartPage#test_add_to_cart","historyId":"372d59ffd5d2f5632326fe25ddd3e2b9","time":{"start":1711553871597,"stop":1711553874122,"duration":2525},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_RESET\n  (Session info: chrome-headless-shell=123.0.6312.86)\nStacktrace:\n\tGetHandleVerifier [0x007E4CC3+225091]\n\t(No symbol) [0x00714E11]\n\t(No symbol) [0x005B9A7A]\n\t(No symbol) [0x005B60BF]\n\t(No symbol) [0x005AB13C]\n\t(No symbol) [0x005AC1CF]\n\t(No symbol) [0x005AB3A3]\n\t(No symbol) [0x005AADC3]\n\t(No symbol) [0x005AACF3]\n\t(No symbol) [0x005A93C3]\n\t(No symbol) [0x005A9A1B]\n\t(No symbol) [0x005BBC78]\n\t(No symbol) [0x006263D1]\n\t(No symbol) [0x0060F55C]\n\t(No symbol) [0x00625CB0]\n\t(No symbol) [0x0060F2F6]\n\t(No symbol) [0x005E79B9]\n\t(No symbol) [0x005E879D]\n\tsqlite3_dbdata_init [0x00C59A63+4064547]\n\tsqlite3_dbdata_init [0x00C6106A+4094762]\n\tsqlite3_dbdata_init [0x00C5B968+4072488]\n\tsqlite3_dbdata_init [0x0095C9C9+930953]\n\t(No symbol) [0x007207E4]\n\t(No symbol) [0x0071AD08]\n\t(No symbol) [0x0071AE31]\n\t(No symbol) [0x0070CAA0]\n\tBaseThreadInitThunk [0x76AEFCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77E67C5E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77E67C2E+238]","statusTrace":"self = <web.tests.test_cart.TestCartPage object at 0x0000020112163050>, chrome_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2ae04d247a12e8f953a905d26e421424\")>\n\n    @allure.title(\"Успешное добавление товара в корзину\")\n    def test_add_to_cart(self, chrome_driver):\n        login_page = LoginPage(chrome_driver)\n        product_page = ProductPage(chrome_driver)\n>       login_page.go_to_site()\n\nweb\\tests\\test_cart.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nweb\\pages\\base_page.py:27: in go_to_site\n    return self.driver.get(self.url)\n..\\python_selenium\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\python_selenium\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020112163110>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_RESET\\\\n  (S...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E67C5E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E67C2E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_RESET\nE         (Session info: chrome-headless-shell=123.0.6312.86)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x007E4CC3+225091]\nE       \t(No symbol) [0x00714E11]\nE       \t(No symbol) [0x005B9A7A]\nE       \t(No symbol) [0x005B60BF]\nE       \t(No symbol) [0x005AB13C]\nE       \t(No symbol) [0x005AC1CF]\nE       \t(No symbol) [0x005AB3A3]\nE       \t(No symbol) [0x005AADC3]\nE       \t(No symbol) [0x005AACF3]\nE       \t(No symbol) [0x005A93C3]\nE       \t(No symbol) [0x005A9A1B]\nE       \t(No symbol) [0x005BBC78]\nE       \t(No symbol) [0x006263D1]\nE       \t(No symbol) [0x0060F55C]\nE       \t(No symbol) [0x00625CB0]\nE       \t(No symbol) [0x0060F2F6]\nE       \t(No symbol) [0x005E79B9]\nE       \t(No symbol) [0x005E879D]\nE       \tsqlite3_dbdata_init [0x00C59A63+4064547]\nE       \tsqlite3_dbdata_init [0x00C6106A+4094762]\nE       \tsqlite3_dbdata_init [0x00C5B968+4072488]\nE       \tsqlite3_dbdata_init [0x0095C9C9+930953]\nE       \t(No symbol) [0x007207E4]\nE       \t(No symbol) [0x0071AD08]\nE       \t(No symbol) [0x0071AE31]\nE       \t(No symbol) [0x0070CAA0]\nE       \tBaseThreadInitThunk [0x76AEFCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77E67C5E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77E67C2E+238]\n\n..\\python_selenium\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"chrome_driver","time":{"start":1711553869436,"stop":1711553871597,"duration":2161},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"afterStages":[{"name":"chrome_driver::0","time":{"start":1711553876360,"stop":1711553878417,"duration":2057},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"suite","value":"Работа с корзиной"},{"name":"feature","value":"Работа с корзиной"},{"name":"tag","value":"cart"},{"name":"parentSuite","value":"web.tests"},{"name":"subSuite","value":"TestCartPage"},{"name":"host","value":"DESKTOP-AMCLGNE"},{"name":"thread","value":"6488-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"web.tests.test_cart"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["cart"]},"source":"de01db4fadeabe78.json","parameterValues":[]}