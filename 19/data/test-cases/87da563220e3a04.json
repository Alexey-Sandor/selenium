{"uid":"87da563220e3a04","name":"Успешное добавление товара в корзину","fullName":"web.tests.test_cart.TestCartPage#test_add_to_cart","historyId":"372d59ffd5d2f5632326fe25ddd3e2b9","time":{"start":1711457583993,"stop":1711457583993,"duration":0},"status":"broken","statusMessage":"ValueError: Must supply at least one keyword argument with patch.multiple","statusTrace":"self = <web.tests.test_cart.TestCartPage object at 0x0000018282F03D90>, chrome_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6de2f6c5d3a3d15d63b49b862c78aea1\")>, mocker = <pytest_mock.plugin.MockerFixture object at 0x0000018281322210>\n\n    @allure.title(\"Успешное добавление товара в корзину\")\n    def test_add_to_cart(self, chrome_driver, mocker):\n>       mocker.patch.multiple(LoginPage)\n\nweb\\tests\\test_cart.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\pytest_mock\\plugin.py:344: in multiple\n    return self._start_patch(\n.venv\\Lib\\site-packages\\pytest_mock\\plugin.py:257: in _start_patch\n    p = mock_func(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <class 'web.pages.login_page.LoginPage'>, spec = None, create = False, spec_set = None, autospec = None, new_callable = None, kwargs = {}, getter = <function _patch_multiple.<locals>.<lambda> at 0x0000018283A71440>\n\n    def _patch_multiple(target, spec=None, create=False, spec_set=None,\n                        autospec=None, new_callable=None, **kwargs):\n        \"\"\"Perform multiple patches in a single call. It takes the object to be\n        patched (either as an object or a string to fetch the object by importing)\n        and keyword arguments for the patches::\n    \n            with patch.multiple(settings, FIRST_PATCH='one', SECOND_PATCH='two'):\n                ...\n    \n        Use `DEFAULT` as the value if you want `patch.multiple` to create\n        mocks for you. In this case the created mocks are passed into a decorated\n        function by keyword, and a dictionary is returned when `patch.multiple` is\n        used as a context manager.\n    \n        `patch.multiple` can be used as a decorator, class decorator or a context\n        manager. The arguments `spec`, `spec_set`, `create`,\n        `autospec` and `new_callable` have the same meaning as for `patch`. These\n        arguments will be applied to *all* patches done by `patch.multiple`.\n    \n        When used as a class decorator `patch.multiple` honours `patch.TEST_PREFIX`\n        for choosing which methods to wrap.\n        \"\"\"\n        if type(target) is str:\n            getter = partial(pkgutil.resolve_name, target)\n        else:\n            getter = lambda: target\n    \n        if not kwargs:\n>           raise ValueError(\n                'Must supply at least one keyword argument with patch.multiple'\n            )\nE           ValueError: Must supply at least one keyword argument with patch.multiple\n\nC:\\Users\\wawan\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\unittest\\mock.py:1658: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"chrome_driver","time":{"start":1711457581836,"stop":1711457583992,"duration":2156},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"mocker","time":{"start":1711457583992,"stop":1711457583992,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1711457583992,"stop":1711457583992,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"afterStages":[{"name":"mocker::0","time":{"start":1711457584145,"stop":1711457584145,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"chrome_driver::0","time":{"start":1711457585413,"stop":1711457587506,"duration":2093},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"Работа с корзиной"},{"name":"suite","value":"Работа с корзиной"},{"name":"tag","value":"cart"},{"name":"parentSuite","value":"web.tests"},{"name":"subSuite","value":"TestCartPage"},{"name":"host","value":"DESKTOP-AMCLGNE"},{"name":"thread","value":"14080-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"web.tests.test_cart"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["cart"]},"source":"87da563220e3a04.json","parameterValues":[]}